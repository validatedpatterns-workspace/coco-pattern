---
- name: Generate self-signed TLS cert for KBS and push to Kubernetes Secret
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  vars:
    kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
    hub_domain: "{{ global.hubClusterDomain | default('none')  | lower}}"
    secret_name: kbs-tls-self-signed
    common_name: "kbs-trustee-operator-system.{{ hub_domain }}"
    days_valid: 365
    renewal_threshold_days: 10
    need_new_cert: false
  pre_tasks:

    - name: Check if TLS secret exists
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        name: "{{ secret_name }}"
        namespace: "imperative"
      register: existing_secret
      ignore_errors: true

    - name: Set fact that certificate doesn't exist
      ansible.builtin.set_fact:
        need_new_cert: true
      when: existing_secret.resources | length == 0

    - name: Extract existing certificate if secret exists
      ansible.builtin.set_fact:
        existing_cert_data: "{{ existing_secret.resources[0].data['tls.crt'] | b64decode }}"
      when: existing_secret.resources | length > 0

    - name: Create temporary file for existing certificate analysis
      ansible.builtin.tempfile:
        state: file
        suffix: .crt
      register: temp_cert_file
      when: existing_secret.resources | length > 0

    - name: Write existing certificate to temp file
      ansible.builtin.copy:
        content: "{{ existing_cert_data }}"
        dest: "{{ temp_cert_file.path }}"
        mode: "0600"
      when: existing_secret.resources | length > 0

    - name: Get certificate expiry date
      community.crypto.x509_certificate_info:
        path: "{{ temp_cert_file.path }}"
      register: cert_info
      when: existing_secret.resources | length > 0

    - name: Calculate days until expiry
      ansible.builtin.set_fact:
        days_until_expiry: "{{ ((cert_info.not_after | to_datetime('%Y%m%d%H%M%SZ')) - now()).days }}"
      when: existing_secret.resources | length > 0

    - name: Set fact to generate new certificate if expiring soon
      ansible.builtin.set_fact:
        need_new_cert: true
      when:
        - existing_secret.resources | length > 0
        - days_until_expiry | int <= renewal_threshold_days

    - name: Clean up temporary certificate file
      ansible.builtin.file:
        path: "{{ temp_cert_file.path }}"
        state: absent
      when: existing_secret.resources | length > 0

    - name: Display certificate status
      ansible.builtin.debug:
        msg: >
          Certificate status:
          {% if existing_secret.resources | length == 0 %}
          No existing certificate found. Will generate new certificate.
          {% elif need_new_cert %}
          Certificate expires in {{ days_until_expiry }} days (threshold: {{ renewal_threshold_days }} days). Will generate new certificate.
          {% else %}
          Certificate is valid for {{ days_until_expiry }} more days. Skipping certificate generation.
          {% endif %}

    - name: Create temporary directory for cert generation
      ansible.builtin.tempfile:
        state: directory
        prefix: kbs-cert-
      register: tmpdir
      when: need_new_cert

  tasks:
    - name: Generate private key
      community.crypto.openssl_privatekey:
        path: "{{ tmpdir.path }}/tls.key"
        size: 4096
      when: need_new_cert

    - name: Generate CSR
      community.crypto.openssl_csr:
        path: "{{ tmpdir.path }}/tls.csr"
        privatekey_path: "{{ tmpdir.path }}/tls.key"
        common_name: "kbs-trustee-operator-system"
        subject_alt_name:
          - "DNS:{{ common_name }}"
      when: need_new_cert

    - name: Generate self-signed certificate
      community.crypto.x509_certificate:
        path: "{{ tmpdir.path }}/tls.crt"
        privatekey_path: "{{ tmpdir.path }}/tls.key"
        csr_path: "{{ tmpdir.path }}/tls.csr"
        provider: selfsigned
        selfsigned_not_after: "+{{ days_valid }}d"
      when: need_new_cert

    - name: Create or update TLS secret for KBS
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
            namespace: "imperative"
          type: kubernetes.io/tls
          stringData:
            tls.crt: "{{ lookup('file', tmpdir.path + '/tls.crt') }}"
            tls.key: "{{ lookup('file', tmpdir.path + '/tls.key') }}"
      when: need_new_cert

    - name: Cleanup temporary directory
      ansible.builtin.file:
        path: "{{ tmpdir.path }}"
        state: absent
      when: need_new_cert and tmpdir is defined
